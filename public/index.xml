<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTSanalyzeR2 on HTSanalyzeR2</title>
    <link>/</link>
    <description>Recent content in HTSanalyzeR2 on HTSanalyzeR2</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 11 Apr 2018 00:00:00 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Preprocessing</title>
      <link>/resources/prepro/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/resources/prepro/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&#34;top&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#prepare-the-input-data&#34;&gt;Prepare the input data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#initialize-and-preprocess&#34;&gt;Initialize and preprocess&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h3 id=&#34;prepare-the-input-data&#34;&gt;Prepare the input data&lt;/h3&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;To perform gene set enrichment analysis for single dataset, you must preprare the following inputs:&lt;br&gt;
1. a named numeric vector of phenotypes (normally this would be a vector of genes with
log2 fold change).&lt;br&gt;
2. a list of gene set collections (could be generated by HTSanalyzeR2 or use customized
gene sets).&lt;br&gt;
First you need to prepare a named phenotype.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data(GSE33113_limma)
phenotype &amp;lt;- as.vector(GSE33113_limma$logFC)
names(phenotype) &amp;lt;- rownames(GSE33113_limma)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Then, if you want to do hypergeometric test on a list of interested genes simultaneously, you need to define the ‘hits’ as your interested genes. For example, here we define the hits as genes with absolute log2 fold change greater than 1 and adjust p value less than 0.05. In this case, the names of phenotype, namely all the input genes, would be taken as the background gene list to perform hypergeometric test.&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Note:In cases if you want to do hypergeometric test with only a list of hits and no phenotype, &lt;strong&gt;HTSanalyzeR2&lt;/strong&gt; can also realize it. For details please go to Part5: Special usage of HTSanalyzeR2.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## define hits if you want to do hypergeometric test
hits &amp;lt;- rownames(GSE33113_limma[abs(GSE33113_limma$logFC) &amp;gt; 1 &amp;amp;
GSE33113_limma$adj.P.Val &amp;lt; 0.05, ])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Then we must define the gene set collections. A gene set collection is a list of gene sets, each of which consists of a group of genes with a similar known function. &lt;strong&gt;HTSanalyzeR2&lt;/strong&gt; provides facilities which greatly simplify the creation of up-to-date gene set collections including three Gene Ontology terms: Molecular Function (MF), Biological Process (BP), Cellular Component (CC) and KEGG pathways. Gene sets in a comprehensive molecular signatures database,MSigDB(&lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btr260&#34; target=&#34;_blank&#34;&gt;Arthur Liberzon (2011)&lt;/a&gt;), for Homo Sapiens and Mus musculus are also provided. Here to simplify the demonstration, we will only use one GO, KEGG and one MSigDB gene set collection. To work properly, you need to choose the right species for your input genes. Besides, these gene set collections must be provided as a named list as below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## generate gene set collection
GO_MF &amp;lt;- GOGeneSets(species=&amp;quot;Hs&amp;quot;, ontologies=c(&amp;quot;MF&amp;quot;))
PW_KEGG &amp;lt;- KeggGeneSets(species=&amp;quot;Hs&amp;quot;)
MSig_C2 &amp;lt;- MSigDBGeneSets(collection = &amp;quot;c2&amp;quot;, species = &amp;quot;Hs&amp;quot;)

## combine all needed gene set collections into a named list for further analysis
ListGSC &amp;lt;- list(GO_MF=GO_MF, PW_KEGG=PW_KEGG, MSig_C2=MSig_C2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;initialize-and-preprocess&#34;&gt;Initialize and preprocess&lt;/h3&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;An S4 class named ‘GSCA’ is developed to perform hypergeometric test in order to find the gene sets sharing significant overlapping with hits. Gene set enrichment analysis, as described by Subramanian et al. (&lt;a href=&#34;https://doi.org/10.1073/pnas.0506580102&#34; target=&#34;_blank&#34;&gt;Subramanian A (2005)&lt;/a&gt;), can also be conducted.&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;To initialize a new ‘GSCA’ object, the previous prepared phenotype and a named list of gene sets collections are needed. In addition, as said before, if you also want to do hypergeometric test, ‘hits’ is needed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;gsca &amp;lt;- GSCA(listOfGeneSetCollections=ListGSC,
            geneList=phenotype, hits=hits)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Then a preprocess step including invalid input data removing, duplication removing by different methods, initial gene identifiers converting to Entrez ID and phenotype ordering needs to be performed to fit for the next analysis. See the help documentation of funciton preprocess for more details.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;gsca1 &amp;lt;- preprocess(gsca, species=&amp;quot;Hs&amp;quot;, initialIDs=&amp;quot;SYMBOL&amp;quot;,
keepMultipleMappings=TRUE, duplicateRemoverMethod=&amp;quot;max&amp;quot;,
orderAbsValue=FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Hypergeometric test</title>
      <link>/resources/hyper/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/resources/hyper/</guid>
      <description>

&lt;hr /&gt;

&lt;h2 id=&#34;hypergeometric-distribution-and-hypergeometric-test&#34;&gt;&lt;strong&gt;Hypergeometric Distribution and Hypergeometric Test&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&#34;tutorials-on-wikipedia&#34;&gt;Tutorials on Wikipedia&lt;/h3&gt;

&lt;iframe src=&#34;https://en.wikipedia.org/wiki/Hypergeometric_distribution&#34; width=&#34;1200px&#34; height=&#34;2700px&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt; &lt;/iframe&gt;

&lt;h3 id=&#34;online-calculate&#34;&gt;Online calculate&lt;/h3&gt;

&lt;iframe src=&#34;https://keisan.casio.com/exec/system/1180573201&#34; width=&#34;1200px&#34; height=&#34;2000px&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Enriched subnetwork analysis</title>
      <link>/resources/es/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/resources/es/</guid>
      <description>

&lt;hr /&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#enriched-subnetwork-analysis&#34;&gt;&lt;strong&gt;Enriched subnetwork analysis&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#prepare-input-initialize-and-preprocess&#34;&gt;Prepare input, initialize and preprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#perform-analysis-and-view-the-identified-subnetwork&#34;&gt;Perform analysis and view the identified subnetwork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summarize-results&#34;&gt;Summarize results&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;p&gt;&lt;span id=&#34;top&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;enriched-subnetwork-analysis&#34;&gt;&lt;strong&gt;Enriched subnetwork analysis&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;You can also perform subnetwork analysis (&lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btq089&#34; target=&#34;_blank&#34;&gt;Beisser (2010&lt;/a&gt;), &lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btn161&#34; target=&#34;_blank&#34;&gt;Dittrich MT (2008)&lt;/a&gt;) to extract the subnetwork enriched with nodes which are associated with a significant phenotype using HTSanalyzeR2. The network can either be fetched by our package to download specific species network from BioGRID database or defined by users.&lt;/p&gt;

&lt;h3 id=&#34;prepare-input-initialize-and-preprocess&#34;&gt;Prepare input, initialize and preprocess&lt;/h3&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;An S4 class named ‘NWA’ is developed to perform subnetwork analysis. To initiate an ‘NWA’ object, you need to prepare a named numeric vector called ‘pvalues’. If phenotypes for genes are also available, they can be inputted in the initialization step and used to highlight nodes with different colors in the identified subnetwork. In that case, the nodes are colored by the sign of phenotypes (red:+, blue:-).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/resources/fig5.png&#34; width= &#34;700&#34; height=&#34;500&#34; alt=&#34;pathway&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;When creating a new object of class ‘NWA’, the user also has the possibility to specify the parameter ‘interactome’ which should be an object of class ‘igraph’. If it is not available, the interactome can also be set up later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pvalues &amp;lt;- GSE33113_limma$adj.P.Val
names(pvalues) &amp;lt;- rownames(GSE33113_limma)
nwa &amp;lt;- NWA(pvalues=pvalues, phenotypes=phenotype)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;The next step is to preprocess the inputs. Similar to ‘GSCA’ class, the function preprocess can conduct invalid input data removing, duplication removing by different methods and initial gene identifiers converting to Entrez ID.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nwa1 &amp;lt;- preprocess(nwa, species=&amp;quot;Hs&amp;quot;, initialIDs=&amp;quot;SYMBOL&amp;quot;,
                   keepMultipleMappings=TRUE, duplicateRemoverMethod=&amp;quot;max&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Then, you need to create an interactome for the network analysis using method interactome if you have not inputted your own interactome in the initial step. To this end, you can either specify the species and fetch the corresponding network from BioGRID database, or input an interaction matrix if it is in right format: a matrix with a row for each interaction, and at least contains the three columns “InteractorA”, “InteractorB” and “InteractionType”, where the interactors are specified by Entrez ID. For more details please see help(interactome).&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Here, we just use interactome to download an interactome from BioGRID, which would meet user’s requirements in most cases.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nwa2 &amp;lt;- interactome(nwa1, species=&amp;quot;Hs&amp;quot;, genetic=FALSE)
getInteractome(nwa2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;perform-analysis-and-view-the-identified-subnetwork&#34;&gt;Perform analysis and view the identified subnetwork&lt;/h3&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Having preprocessed the input data and created the interactome, the subnetwork analysis
could be performed by using the analyze method. This function will plot a figure showing the fitting of the BioNet model to your distribution of pvalues (Beisser (2010)), which is a good way to check the choice of statistics used in this function. The argument fdr of the method analyze is the false discovery rate for BioNet to fit the beta-uniform mixture (BUM) model. The parameters of the fitted model will then be used for the scoring function, which subsequently enables the BioNet package to search the optimal scoring subnetwork. See BioNet for more details (Beisser (2010)).&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Here, to simplify this vignette, we set a very strict ‘fdr’ as 1e-06. In practice, you may want to set a less strict one (e.g. 0.01).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nwa3 &amp;lt;- analyze(nwa2, fdr=1e-06, species=&amp;quot;Hs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/resources/fig6.png&#34; width= &#34;700&#34; height=&#34;500&#34; alt=&#34;pathway&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Similar to ‘GSCA’, you can also view the subnetwork by viewSubNet. Again, for better visualization, modification and downloading, users are highly recommended to view the result in an interactive Shiny report by function report.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;viewSubNet(nwa3)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;summarize-results&#34;&gt;Summarize results&lt;/h3&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Like ‘GSCA’, the method summarize could also be used to get a general summary of an analyzed ‘NWA’ object including inputs, interactome, parameters for analysis and the size of identified subnetwork.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/resources/fig7.png&#34; width= &#34;700&#34; height=&#34;500&#34; alt=&#34;pathway&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;summarize(nwa3)
##
## -p-values:
##               input          valid     duplicate removed
##               21656          21655       21655
## converted to entrez in interactome
##               18865          15008
##
##
## -Phenotypes:
##                input          valid    duplicate removed
##                21656          21655      21655
##  converted to entrez  in interactome
##                18865          15008
##
##
## -Interactome:
##                 name    species genetic  node No  edge No
## Interaction dataset Biogrid Hs    FALSE   22439    332134
##
##
## -Parameters for analysis:
##             FDR
## Parameter 1e-06
##
##
## -Subnetwork identified:
##           node No   edge No
## Subnetwork     81   113
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Case Study 1: Single dataset analysis for gene expression data</title>
      <link>/post/casestudy1/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>/post/casestudy1/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&#34;top&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-hypergeometric-test-and-gene-set-enrichment-analysis&#34;&gt;1. Hypergeometric test and gene set enrichment analysis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-1-prepare-the-input-data&#34;&gt;1.1 Prepare the input data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-2-initialize-and-preprocess&#34;&gt;1.2 Initialize and preprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-3-perform-analysis&#34;&gt;1.3 Perform analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-4-summarize-results&#34;&gt;1.4 Summarize results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-5-plot-gene-sets&#34;&gt;1.5 Plot gene sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-6-enrichment-map&#34;&gt;1.6 Enrichment Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-7-enrichment-map-with-specific-gene-sets&#34;&gt;1.7 Enrichment Map with specific gene sets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-enriched-subnetwork-analysis&#34;&gt;2.Enriched subnetwork analysis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#2-1-prepare-input-initialize-and-preprocess&#34;&gt;2.1 Prepare input, initialize and preprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-2-perform-analysis-and-view-the-identified-subnetwork&#34;&gt;2.2 Perform analysis and view the identified subnetwork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-3-summarize-results&#34;&gt;2.3 Summarize results&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;hr /&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;This case study uses &lt;strong&gt;HTSanalyzeR2&lt;/strong&gt; to perform gene set over-representation analysis, enrichment analysis and enriched subnetwork analyses on a common gene expression profile. Basically, this dataset is from a micro-array experiment on 90 colon cancer patients with GEO number named &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE33113&#34; target=&#34;_blank&#34;&gt;GSE33113&lt;/a&gt;. Using the Colon Cancer Consensus Molecular Subtyping classifier generated by Guinney J et al. in 2015 (Guinney J (2015)), we can easily get the subtype label of each patient. Motivated by the poorest prognosis of CMS4 patients, we want to detect the enriched pathways of CMS4 patients compared to non-CMS4 patients. To this end, first we need to do the differential expression analysis using the most popular R packge ‘limma’ tailored for micro-array data. However, to make this vignette simple enough, we skip to exlpain this step and start from the result gotten by ‘limma’.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;1-hypergeometric-test-and-gene-set-enrichment-analysis&#34;&gt;1. Hypergeometric test and gene set enrichment analysis&lt;/h1&gt;

&lt;h2 id=&#34;1-1-prepare-the-input-data&#34;&gt;1.1 Prepare the input data&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;To perform gene set enrichment analysis for single dataset, you must preprare the following
inputs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a named numeric vector of phenotypes (normally this would be a vector of genes with
log2 fold change).&lt;/li&gt;
&lt;li&gt;a list of gene set collections (could be generated by &lt;strong&gt;HTSanalyzeR2&lt;/strong&gt; or use customized gene sets).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;First you need to prepare a named phenotype.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data(GSE33113_limma)
phenotype &amp;lt;- as.vector(GSE33113_limma$logFC)
names(phenotype) &amp;lt;- rownames(GSE33113_limma)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Then, if you want to do hypergeometric test on a list of interested genes simultaneously, you
need to define the ‘hits’ as your interested genes. For example, here we define the hits as
genes with absolute log2 fold change greater than 1 and adjust p value less than 0.05. &lt;strong&gt;In this case, the names of phenotype, namely all the input genes, would be taken as the background gene list to perform hypergeometric test.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;&lt;strong&gt;Note&lt;/strong&gt;:In cases if you want to do hypergeometric test with only a list of hits and no phenotype, &lt;strong&gt;HTSanalyzeR2&lt;/strong&gt; can also realize it. For details please go to Part5: Special usage of HTSanalyzeR2.&lt;need modified&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## define hits if you want to do hypergeometric test
hits &amp;lt;- rownames(GSE33113_limma[abs(GSE33113_limma$logFC) &amp;gt; 1 &amp;amp; GSE33113_limma$adj.P.Val &amp;lt; 0.05, ])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Then we must define the gene set collections. A gene set collection is a list of gene sets, each
of which consists of a group of genes with a similar known function. &lt;strong&gt;HTSanalyzeR2&lt;/strong&gt; provides
facilities which greatly simplify the creation of up-to-date gene set collections including three
Gene Ontology terms: Molecular Function (MF), Biological Process (BP), Cellular Component
(CC) and KEGG pathways. Gene sets in a comprehensive molecular signatures database, &lt;a href=&#34;http://software.broadinstitute.org/gsea/msigdb&#34; target=&#34;_blank&#34;&gt;MSigDB&lt;/a&gt;(Arthur Liberzon (2011)), for Homo Sapiens and Mus musculus are also provided.
Here to simplify the demonstration, we will only use one GO, KEGG and one MSigDB gene
set collection. To work properly, you need to choose the right species for your input genes.
Besides, these gene set collections must be provided as a named list as below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## generate gene set collection
GO_MF &amp;lt;- GOGeneSets(species=&amp;quot;Hs&amp;quot;, ontologies=c(&amp;quot;MF&amp;quot;))
PW_KEGG &amp;lt;- KeggGeneSets(species=&amp;quot;Hs&amp;quot;)
MSig_C2 &amp;lt;- MSigDBGeneSets(collection = &amp;quot;c2&amp;quot;, species = &amp;quot;Hs&amp;quot;)
## combine all needed gene set collections into a named list for further analysis
ListGSC &amp;lt;- list(GO_MF=GO_MF, PW_KEGG=PW_KEGG, MSig_C2=MSig_C2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-2-initialize-and-preprocess&#34;&gt;1.2 Initialize and preprocess&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;An S4 class named ‘GSCA’ is developed to perform hypergeometric test in order to find the
gene sets sharing significant overlapping with hits. Gene set enrichment analysis, as described
by Subramanian et al. (Subramanian A (2005)), can also be conducted.&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;To initialize a new ‘GSCA’ object, the previous prepared phenotype and a named list of gene
sets collections are needed. In addition, as said before, if you also want to do hypergeometric
test, ‘hits’ is needed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gsca &amp;lt;- GSCA(listOfGeneSetCollections=ListGSC,
             geneList=phenotype, hits=hits)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Then a preprocess step including invalid input data removing, duplication removing by different
methods, initial gene identifiers converting to Entrez ID and phenotype ordering needs to be
performed to fit for the next analysis. See the help documentation of funciton preprocess for
more details.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-3-perform-analysis&#34;&gt;1.3 Perform analysis&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;After getting a preprocessed ‘GSCA’ object, you can perform hypergeometric test and gene
set enrichment analysis using the function named analyze. This funciton needs an argument
called para, which is a list of parameters including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pValueCutoff : a single numeric value specifying the cutoff for adjusted pvalues considered
significant.&lt;/li&gt;
&lt;li&gt;pAdjustMethod: a single character value specifying the pvalue adjustment method.&lt;/li&gt;
&lt;li&gt;nPermutations: a single numeric value specifying the number of permutations for
deriving p-values of GSEA.&lt;/li&gt;
&lt;li&gt;minGeneSetSize: a single numeric value specifying the minimum number of genes shared
by a gene set and the background genes, namely the phenotype. Gene sets with fewer
than this number are removed from both hypergeometric test and GSEA.&lt;/li&gt;
&lt;li&gt;exponent: a single integer or numeric value used in weighting phenotypes in GSEA, as
described by Subramanian et al. (Subramanian A (2005)).&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;gsca2 &amp;lt;- analyze(gsca1,
                 para=list(pValueCutoff=0.05, pAdjustMethod=&amp;quot;BH&amp;quot;,
                 nPermutations=100, minGeneSetSize=150,
                 exponent=1),
                 doGSOA = TRUE, doGSEA = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;In this case study, we only use 100 permutations and set a very large minGeneSetSize just
for a fast compilation of this vignette. In real applications, you may want a much smaller
threshold (e.g. 10) and more permutations (e.g. 1000) to get a more robust GSEA result.&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;During the enrichment analysis of gene sets, the function evaluates the statistical significance
of the gene set scores by performing a large number of permutations. To perform it more
efficiently, our package allows parallel calculation based on the doParallel package. To do
this, the user simply needs to register and claim to use multiple cores &lt;strong&gt;before&lt;/strong&gt; running analyze.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## analyze using 4 cores
if (requireNamespace(&amp;quot;doParallel&amp;quot;, quietly=TRUE)) {
    doParallel::registerDoParallel(cores=4)
} else {
}
gsca2 &amp;lt;- analyze(gsca1,
                 para=list(pValueCutoff=0.05, pAdjustMethod=&amp;quot;BH&amp;quot;,
                 nPermutations=100, minGeneSetSize=150,
                 exponent=1),
                 doGSOA = TRUE, doGSEA = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;After analyzing, all the results are stored in slot result and can be easily accessed using a
function named getResult. If hypergeometric test and GSEA are both performed, gene sets
which are both significant in this two kinds of analysis based on either pvalue or adjusted
pvalue can be accessed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## 1. hypergeometric test result using BP gene sets from GO
head(getResult(gsca2)$HyperGeo.results$GO_MF, 3)
##          Universe Size Gene Set Size Total Hits Expected Hits
## GO:0005509        18865          628        450    14.980122
## GO:0008083        18865          150        450    3.578055
## GO:0042803        18865          751        450    17.914127
##          Observed Hits         Pvalue    Adjusted.Pvalue
## GO:0005509           41  5.887557e-09     4.817155e-08
## GO:0008083           14  1.474862e-05     7.964255e-05
## GO:0042803           31  2.254969e-03     8.335333e-03

## 2. GSEA result using KEGG gene sets
head(getResult(gsca2)$GSEA.results$PW_KEGG, 3)
##          Observed.score       Pvalue     Adjusted.Pvalue
## hsa04022       0.4977871           0                  0
## hsa00230      -0.3699180           0                  0
## hsa05152       0.5278489           0                  0

## 3. result both significant regarding to pvalues in hypergeometric test
##    and GSEA using &#39;c2&#39; gene sets from MSigDB
head(getResult(gsca2)$Sig.pvals.in.both$MSig_C2, 3)
##                                                    HyperGeo.Pvalue
## TAKEDA_TARGETS_OF_NUP98_HOXA9_FUSION_8D_UP             1.590818e-05
## TONKS_TARGETS_OF_RUNX1_RUNX1T1_FUSION_ERYTHROCYTE_UP   1.590818e-05
## BIDUS_METASTASIS_DN                                    1.039777e-02
##                                                       GSEA.Pvalue
## TAKEDA_TARGETS_OF_NUP98_HOXA9_FUSION_8D_UP                 0
## TONKS_TARGETS_OF_RUNX1_RUNX1T1_FUSION_ERYTHROCYTE_UP       0
## BIDUS_METASTASIS_DN                                        0

## 4. result both significant regarding to adjust pvalues in hypergeometric test
##    and GSEA using &#39;c2&#39; gene sets from MSigDB
head(getResult(gsca2)$Sig.adj.pvals.in.both$MSig_C2, 3)
##                                                    HyperGeo.Adj.Pvalue
## TAKEDA_TARGETS_OF_NUP98_HOXA9_FUSION_8D_UP             8.372016e-05
## TONKS_TARGETS_OF_RUNX1_RUNX1T1_FUSION_ERYTHROCYTE_UP   8.372016e-05
## BIDUS_METASTASIS_DN                                    3.089480e-02
##                                                       GSEA.Adj.Pvalue
## TAKEDA_TARGETS_OF_NUP98_HOXA9_FUSION_8D_UP                  0
## TONKS_TARGETS_OF_RUNX1_RUNX1T1_FUSION_ERYTHROCYTE_UP        0
## BIDUS_METASTASIS_DN                                         0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;In addition, to make the results more understandable, users are highly recommended to annotate the gene sets ID to names by function appendGSTerms. As a result, an additional column named ‘Gene.Set.Term’ would appear.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gsca3 &amp;lt;- appendGSTerms(gsca2, goGSCs=c(&amp;quot;GO_MF&amp;quot;),
                       keggGSCs=c(&amp;quot;PW_KEGG&amp;quot;),
                       msigdbGSCs = c(&amp;quot;MSig_C2&amp;quot;))
                       
head(getResult(gsca3)$GSEA.results$PW_KEGG, 3)
##                        Gene.Set.Term         Observed.score  Pvalue  Adjusted.Pvalue
## hsa04022    cGMP-PKG signaling pathway          0.4977871       0          0
## hsa00230         Purine metabolism             -0.3699180       0          0
## hsa05152 T             uberculosis              0.5278489       0          0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-4-summarize-results&#34;&gt;1.4 Summarize results&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt; A &lt;em&gt;summarize&lt;/em&gt; method could be performed to get a general summary for an analyzed ‘GSCA’
object including the gene set collections, genelist, hits, parameters for analysis and the
summary of result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;summarize(gsca3)
##
## -No of genes in Gene set collections:
##        input above min size
## GO_MF   4150        50
## PW_KEGG 329         38
## MSig_C2 3762        533
##
##
## -No of genes in Gene List:
##            input  valid  duplicate removed converted to entrez
## Gene List  21656  21655              21655              18865
##
##
## -No of hits:
##        input   preprocessed
## Hits    469         450
##
##
## -Parameters for analysis:
##                 minGeneSetSize pValueCutoff pAdjustMethod
## HyperGeo Test        150           0.05          BH
##
##                 minGeneSetSize pValueCutoff pAdjustMethod nPermutations exponent
## GSEA                 150           0.05          BH            100          1
##
##
## -Significant gene sets (adjusted p-value&amp;lt; 0.05 ):
##             GO_MF PW_KEGG MSig_C2
## HyperGeo      7      7       224
## GSEA         22     22       401
## Both          7      7       207
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-5-plot-gene-sets&#34;&gt;1.5 Plot gene sets&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;To better view the GSEA result for a single gene set, you can use viewGSEA to plot the
positions of the genes of the gene set in the ranked phenotypes and the location of the
enrichment score. To this end, you must first get the gene set ID by getTopGeneSets, which
can return all or the top significant gene sets from GSEA results. Basically, the user needs
to specify the type of results – “HyperGeo.results” or “GSEA.results”, the name(s) of the
gene set collection(s) as well as the type of selection– all (by parameter ‘allSig’) or top (by
parameter ‘ntop’) significant gene sets.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;topGS &amp;lt;- getTopGeneSets(gsca3, resultName=&amp;quot;GSEA.results&amp;quot;,
                        gscs=c(&amp;quot;GO_MF&amp;quot;, &amp;quot;PW_KEGG&amp;quot;), allSig=TRUE)
topGS
## $GO_MF
## GO:0008083 GO:0016887 GO:0005125 GO:0004252 GO:0005198
## &amp;quot;GO:0008083&amp;quot; &amp;quot;GO:0016887&amp;quot; &amp;quot;GO:0005125&amp;quot; &amp;quot;GO:0004252&amp;quot; &amp;quot;GO:0005198&amp;quot;
## GO:0003714 GO:0004888 GO:0003779 GO:0001077 GO:0004871
## &amp;quot;GO:0003714&amp;quot; &amp;quot;GO:0004888&amp;quot; &amp;quot;GO:0003779&amp;quot; &amp;quot;GO:0001077&amp;quot; &amp;quot;GO:0004871&amp;quot;
## GO:0004930 GO:0005102 GO:0005509 GO:0042803 GO:0003723
## &amp;quot;GO:0004930&amp;quot; &amp;quot;GO:0005102&amp;quot; &amp;quot;GO:0005509&amp;quot; &amp;quot;GO:0042803&amp;quot; &amp;quot;GO:0003723&amp;quot;
## GO:0005524 GO:0005515 GO:0000287 GO:0003924 GO:0019899
## &amp;quot;GO:0005524&amp;quot; &amp;quot;GO:0005515&amp;quot; &amp;quot;GO:0000287&amp;quot; &amp;quot;GO:0003924&amp;quot; &amp;quot;GO:0019899&amp;quot;
## GO:0000981 GO:0003677
## &amp;quot;GO:0000981&amp;quot; &amp;quot;GO:0003677&amp;quot;
##
## $PW_KEGG
## hsa04022 hsa00230 hsa05152 hsa05016 hsa05202 hsa04360 hsa04062
## &amp;quot;hsa04022&amp;quot; &amp;quot;hsa00230&amp;quot; &amp;quot;hsa05152&amp;quot; &amp;quot;hsa05016&amp;quot; &amp;quot;hsa05202&amp;quot; &amp;quot;hsa04360&amp;quot; &amp;quot;hsa04062&amp;quot;
## hsa04020 hsa04510 hsa05205 hsa04015 hsa04714 hsa04810 hsa04060
## &amp;quot;hsa04020&amp;quot; &amp;quot;hsa04510&amp;quot; &amp;quot;hsa05205&amp;quot; &amp;quot;hsa04015&amp;quot; &amp;quot;hsa04714&amp;quot; &amp;quot;hsa04810&amp;quot; &amp;quot;hsa04060&amp;quot;
## hsa04010 hsa05165 hsa04151 hsa05200 hsa01100 hsa05206 hsa04621
## &amp;quot;hsa04010&amp;quot; &amp;quot;hsa05165&amp;quot; &amp;quot;hsa04151&amp;quot; &amp;quot;hsa05200&amp;quot; &amp;quot;hsa01100&amp;quot; &amp;quot;hsa05206&amp;quot; &amp;quot;hsa04621&amp;quot;
## hsa04014
## &amp;quot;hsa04014&amp;quot;
viewGSEA(gsca3, gscName=&amp;quot;GO_MF&amp;quot;, gsName=topGS[[&amp;quot;GO_MF&amp;quot;]][4])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/tutorials/fig2.png&#34; width= &#34;500&#34; height=&#34;400&#34; alt=&#34;pathway&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;You can also plot all or the top significant gene sets in batch and store them as png or pdf
format into a specified path by using plotGSEA.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plotGSEA(gsca3, gscs=c(&amp;quot;GO_MF&amp;quot;, &amp;quot;PW_KEGG&amp;quot;), ntop=3, filepath=&amp;quot;.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-6-enrichment-map&#34;&gt;1.6 Enrichment Map&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;To get a comprehensive view of the hypergeometric test result or GSEA result instead of a
list of significant gene sets with no relations, our package provides viewEnrichMap function
to draw an enrichment map for better interpretation(Merico D (2010)). More specifically,
in the enrichment map, nodes represent significant gene sets sized by the genes it contains
and the edge represents the Jaccard similarity coefficient between two gene sets. Nodes
color are scaled according to the adjusted pvalues (the darker, the more significant). For
hypergeometric test, there is only one color for nodes whereas for GSEA enrichment map, the
default color is setted by the sign of enrichment scores (red:+, blue:-). You can also set your
favourite format by changing the parameter named ‘options’.&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;However, users are always highly recommended to use function report to visualize and modify
the enrichment map with personal preference in an interactive report, such as different layout,
color and size of nodes, types of labels and etc. More details please go to Part4: An interactive
Shiny report of results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## the enrichment map of GSEA result for top 5 significant
## gene sets in &#39;PW_KEGG&#39; and &#39;GO_MF&#39;
viewEnrichMap(gsca3, resultName = &amp;quot;GSEA.results&amp;quot;,
              gscs=c(&amp;quot;PW_KEGG&amp;quot;, &amp;quot;GO_MF&amp;quot;),
              allSig = FALSE, gsNameType = &amp;quot;term&amp;quot;, ntop = 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/tutorials/fig3.png&#34; width= &#34;700&#34; height=&#34;500&#34; alt=&#34;pathway&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## the enrichment map of hypergeometric test result for
## top 5 significant gene sets in &#39;PW_KEGG&#39; and &#39;GO_MF&#39;
viewEnrichMap(gsca3, resultName = &amp;quot;HyperGeo.results&amp;quot;,
              gscs=c(&amp;quot;PW_KEGG&amp;quot;, &amp;quot;GO_MF&amp;quot;),
              allSig = FALSE, gsNameType = &amp;quot;term&amp;quot;, ntop = 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-7-enrichment-map-with-specific-gene-sets&#34;&gt;1.7 Enrichment Map with specific gene sets&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;It is often the case that the enrichment map would be of large size due to the huge number
of enriched gene sets. However, you may only be interested in a small part of them. A big
size of enrichment map would also be in a mess and lose the information it can offer. In
that way, &lt;strong&gt;HTSanalyzeR2&lt;/strong&gt; provides an interface allowing users to draw the enrichment map
on their interested gene sets. More details please see the help documentation of function &lt;em&gt;viewEnrichMap&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/tutorials/fig4.png&#34; width= &#34;700&#34; height=&#34;500&#34; alt=&#34;pathway&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## specificGeneset needs to be a subset of all analyzed gene sets
## which can be roughly gotten by:
tmp &amp;lt;- getTopGeneSets(gsca3, resultName = &amp;quot;GSEA.results&amp;quot;, gscs=c(&amp;quot;PW_KEGG&amp;quot;),
                      ntop = 200, allSig = FALSE)
                      
## In that case, we can define specificGeneset such as below:
PW_KEGG_geneset &amp;lt;- tmp$PW_KEGG[c(2, 3, 6, 7, 10, 18)]

## the name of specificGenesets also needs to match with the names of tmp
specificGeneset &amp;lt;- list(&amp;quot;PW_KEGG&amp;quot;=PW_KEGG_geneset)
viewEnrichMap(gsca3, resultName = &amp;quot;GSEA.results&amp;quot;, gscs=c(&amp;quot;PW_KEGG&amp;quot;),
              allSig = FALSE, gsNameType = &amp;quot;term&amp;quot;,
              ntop = NULL, specificGeneset = specificGeneset)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;2-enriched-subnetwork-analysis&#34;&gt;2.Enriched subnetwork analysis&lt;/h1&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;You can also perform subnetwork analysis (&lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btq089&#34; target=&#34;_blank&#34;&gt;Beisser (2010&lt;/a&gt;), &lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btn161&#34; target=&#34;_blank&#34;&gt;Dittrich MT (2008)&lt;/a&gt;) to extract the subnetwork enriched with nodes which are associated with a significant phenotype using HTSanalyzeR2. The network can either be fetched by our package to download specific species network from BioGRID database or defined by users.&lt;/p&gt;

&lt;h2 id=&#34;2-1-prepare-input-initialize-and-preprocess&#34;&gt;2.1 Prepare input, initialize and preprocess&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;An S4 class named ‘NWA’ is developed to perform subnetwork analysis. To initiate an ‘NWA’ object, you need to prepare a named numeric vector called ‘pvalues’. If phenotypes for genes are also available, they can be inputted in the initialization step and used to highlight nodes with different colors in the identified subnetwork. In that case, the nodes are colored by the sign of phenotypes (red:+, blue:-).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/resources/fig5.png&#34; width= &#34;700&#34; height=&#34;500&#34; alt=&#34;pathway&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;When creating a new object of class ‘NWA’, the user also has the possibility to specify the parameter ‘interactome’ which should be an object of class ‘igraph’. If it is not available, the interactome can also be set up later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pvalues &amp;lt;- GSE33113_limma$adj.P.Val
names(pvalues) &amp;lt;- rownames(GSE33113_limma)
nwa &amp;lt;- NWA(pvalues=pvalues, phenotypes=phenotype)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;The next step is to preprocess the inputs. Similar to ‘GSCA’ class, the function preprocess can conduct invalid input data removing, duplication removing by different methods and initial gene identifiers converting to Entrez ID.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nwa1 &amp;lt;- preprocess(nwa, species=&amp;quot;Hs&amp;quot;, initialIDs=&amp;quot;SYMBOL&amp;quot;,
                   keepMultipleMappings=TRUE, duplicateRemoverMethod=&amp;quot;max&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Then, you need to create an interactome for the network analysis using method interactome if you have not inputted your own interactome in the initial step. To this end, you can either specify the species and fetch the corresponding network from BioGRID database, or input an interaction matrix if it is in right format: a matrix with a row for each interaction, and at least contains the three columns “InteractorA”, “InteractorB” and “InteractionType”, where the interactors are specified by Entrez ID. For more details please see help(interactome).&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Here, we just use interactome to download an interactome from BioGRID, which would meet user’s requirements in most cases.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nwa2 &amp;lt;- interactome(nwa1, species=&amp;quot;Hs&amp;quot;, genetic=FALSE)
getInteractome(nwa2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-2-perform-analysis-and-view-the-identified-subnetwork&#34;&gt;2.2 Perform analysis and view the identified subnetwork&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Having preprocessed the input data and created the interactome, the subnetwork analysis
could be performed by using the analyze method. This function will plot a figure showing the fitting of the BioNet model to your distribution of pvalues (Beisser (2010)), which is a good way to check the choice of statistics used in this function. The argument fdr of the method analyze is the false discovery rate for BioNet to fit the beta-uniform mixture (BUM) model. The parameters of the fitted model will then be used for the scoring function, which subsequently enables the BioNet package to search the optimal scoring subnetwork. See BioNet for more details (Beisser (2010)).&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Here, to simplify this vignette, we set a very strict ‘fdr’ as 1e-06. In practice, you may want to set a less strict one (e.g. 0.01).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nwa3 &amp;lt;- analyze(nwa2, fdr=1e-06, species=&amp;quot;Hs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/resources/fig6.png&#34; width= &#34;700&#34; height=&#34;500&#34; alt=&#34;pathway&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Similar to ‘GSCA’, you can also view the subnetwork by viewSubNet. Again, for better visualization, modification and downloading, users are highly recommended to view the result in an interactive Shiny report by function report.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;viewSubNet(nwa3)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-3-summarize-results&#34;&gt;2.3 Summarize results&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Like ‘GSCA’, the method summarize could also be used to get a general summary of an analyzed ‘NWA’ object including inputs, interactome, parameters for analysis and the size of identified subnetwork.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/resources/fig7.png&#34; width= &#34;700&#34; height=&#34;500&#34; alt=&#34;pathway&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;summarize(nwa3)
##
## -p-values:
##               input          valid     duplicate removed
##               21656          21655       21655
## converted to entrez in interactome
##               18865          15008
##
##
## -Phenotypes:
##                input          valid    duplicate removed
##                21656          21655      21655
##  converted to entrez  in interactome
##                18865          15008
##
##
## -Interactome:
##                 name    species genetic  node No  edge No
## Interaction dataset Biogrid Hs    FALSE   22439    332134
##
##
## -Parameters for analysis:
##             FDR
## Parameter 1e-06
##
##
## -Subnetwork identified:
##           node No   edge No
## Subnetwork     81   113
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Case Study 2: Time series analysis for CRISPR data</title>
      <link>/post/casestudy2/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>/post/casestudy2/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&#34;top&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-hypergeometric-test-and-gene-set-enrichment-analysis&#34;&gt;1. Hypergeometric test and gene set enrichment analysis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-1-prepare-the-input-data&#34;&gt;1.1 Prepare the input data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-2-initialize-and-preprocess&#34;&gt;1.2 Initialize and preprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-3-perform-analysis&#34;&gt;1.3 Perform analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-enriched-subnetwork-analysis&#34;&gt;2. Enriched subnetwork analysis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#2-1-prepare-input-initialize-and-preprocess&#34;&gt;2.1 Prepare input, initialize and preprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-2-perform-analysis&#34;&gt;3.2 Perform analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;This case study uses a time series CRISPR genome-wide drop-out data as a demonstration
to perform time series analysis. Data ‘d7’, ‘d13’ and ‘d25’ are three gRNA sequencing data
after transducting the CRISPR system into a human cancer cellline on day 7, day 13 and
day 25 separately (Tzelepis K (2016)), they are further preprocessed by &lt;a href=&#34;https://sourceforge.net/p/mageck/wiki/Home/&#34; target=&#34;_blank&#34;&gt;MAGeCK&lt;/a&gt; to identify
significant essential genes from genome-scale CRISPR knockout screens. Again, here to simply
the compilation of this vignette, we skip the preprocessed steps and start from the results
gotten by MAGeCK.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;1-hypergeometric-test-and-gene-set-enrichment-analysis&#34;&gt;1. Hypergeometric test and gene set enrichment analysis&lt;/h1&gt;

&lt;h2 id=&#34;1-1-prepare-the-input-data&#34;&gt;1.1 Prepare the input data&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;To perform analysis for time series data, one must prepare the following inputs:
&lt;p align=&#34;justify&#34;&gt;1. A character matrix contains experiment information with each experiment in row and
descriptions in column. Specifically, it should at least contain two columns named as
‘ID’ and ‘Description’.
&lt;p align=&#34;justify&#34;&gt;2. A list of phenotypes, each element of this list is a phenotype of that experiment. An
important thing here needs to be noted is the order of each element of this list
must match the order of ‘ID’ in the experiment information matrix.
&lt;p align=&#34;justify&#34;&gt;3. A list of gene set collections which can either be gotten by HTSanalyzeR2 or defined
by users using customized gene sets.&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;To make it easy to compile this vignette, here we only use Biological Process (BP) in Gene
Ontology to make a demonstration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data(d7, d13, d25)
expInfor &amp;lt;- matrix(c(&amp;quot;d7&amp;quot;, &amp;quot;d13&amp;quot;, &amp;quot;d25&amp;quot;), nrow = 3, ncol = 2, byrow = FALSE,
                   dimnames = list(NULL, c(&amp;quot;ID&amp;quot;, &amp;quot;Description&amp;quot;)))
datalist &amp;lt;- list(d7, d13, d25)

phenotypeTS &amp;lt;- lapply(datalist, function(x) {
  tmp &amp;lt;- as.vector(x$neg.lfc)
  names(tmp) &amp;lt;- x$id
  tmp
})

GO_BP &amp;lt;- GOGeneSets(species=&amp;quot;Hs&amp;quot;, ontologies=c(&amp;quot;BP&amp;quot;))
ListGSC &amp;lt;- list(GO_BP=GO_BP)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Similar as single dataset analysis, if you also want to do hypergeometric test, a list of hits
is needed. Here, each element of this list is a hits of that experiment. Also, &lt;strong&gt;the order of each element of this list must match the order of ‘ID’ in the experiment information matrix.&lt;/strong&gt; Here, for each data set, we define genes with pvalue less than 0.01 as hits.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hitsTS &amp;lt;- lapply(datalist, function(x){
  tmp &amp;lt;- x[x$neg.p.value &amp;lt; 0.01, &amp;quot;id&amp;quot;]
  tmp
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-2-initialize-and-preprocess&#34;&gt;1.2 Initialize and preprocess&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;To perform gene set enrichment analysis and hypermetric test for time-series data, an S4
class ‘GSCABatch’ which can pack the time series data to do further analysis is developed.
First, you need to create a new ‘GSCABatch’ object using the prepared inputs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gscaTS &amp;lt;- GSCABatch(expInfor = expInfor,
                    phenotypeTS = phenotypeTS, listOfGeneSetCollections = ListGSC,
                    hitsTS = hitsTS)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Then, the ‘GSCABatch’ object need to be preprocessed using preprocessGscaTS method. The
preprocess procedure here is the same as single data set. This step would return a list of
preprocessed ‘GSCA’ object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gscaTS1 &amp;lt;- preprocessGscaTS(gscaTS, species=&amp;quot;Hs&amp;quot;, initialIDs=&amp;quot;SYMBOL&amp;quot;,
                            keepMultipleMappings=TRUE,
                            duplicateRemoverMethod=&amp;quot;max&amp;quot;,
                            orderAbsValue=FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-3-perform-analysis&#34;&gt;1.3 Perform analysis&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;After getting a list of preprocessed ‘GSCA’ object, you can use analyzeGscaTS to perform
hypergeometric test as well as GSEA on it. The parameters’ function here is the same as in
single data set. Similarly, to speed up you can use multiple cores via doParallel package. This
step would return a list of analyzed ‘GSCA’ object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## analyze using 4 cores
if (requireNamespace(&amp;quot;doParallel&amp;quot;, quietly=TRUE)) {
    doParallel::registerDoParallel(cores=4)
} else {
}

gscaTS2 &amp;lt;- analyzeGscaTS(gscaTS1, para=list(pValueCutoff=0.05,
                                            pAdjustMethod=&amp;quot;BH&amp;quot;,
                                            nPermutations=100,
                                            minGeneSetSize=100,
                                            exponent=1),
                         doGSOA = TRUE, doGSEA = TRUE)
                         
## GSEA result of the first experiment usingBP gene sets
head(getResult(gscaTS2[[1]])$GSEA.results$GO_BP, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;To make the result more understandable, users are highly recommended to annotate the gene
sets ID to names by function appendGSTermsTS. As a result, an additional column named
‘Gene.Set.Term’ would appear.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gscaTS3 &amp;lt;- appendGSTermsTS(gscaTS2, goGSCs=c(&amp;quot;GO_BP&amp;quot;))
head(getResult(gscaTS3[[1]])$GSEA.results$GO_BP, 3)
##                    Gene.Set.Term         Observed.score  Pvalue
## GO:0006281          DNA repair             -0.6898409       0
## GO:0001525         angiogenesis            -0.1840823       0
## GO:0000398 mRNA splicing, via spliceosome  -0.8693455       0
##             Adjusted.Pvalue
## GO:0006281         0
## GO:0001525         0
## GO:0000398         0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;You can then use &lt;em&gt;reportAll&lt;/em&gt; to generate an interactive Shiny report to visualize a union
enrichment map for this time series data. To put it more specific, a union enrichment map is
generated by taking the union of significant gene sets in each experiment and then form an
enrichment map as illustrated before. Thus there maybe be some gene sets not significant in
one time point but in others. More details please see Part4: An interactive Shiny report of
results.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;2-enriched-subnetwork-analysis&#34;&gt;2. Enriched subnetwork analysis&lt;/h1&gt;

&lt;h2 id=&#34;2-1-prepare-input-initialize-and-preprocess&#34;&gt;2.1 Prepare input, initialize and preprocess&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;An S4 class named ‘NWABatch’ is developed to pack time series data for further subnetwork
analysis. You need first to create a new object of class ‘NWABatch’. To this end, a list of
pvalues is needed. Each element of this list is a vector of pvalues of that experiment. &lt;strong&gt;Again, an important thing needs to be noted is the order of each element of this list must match the order of ‘ID’ in the experiment information matrix.&lt;/strong&gt; If a list of phenotypes
is also available, they can be inputted during the initialization stage and used to highlight
nodes with different colors in the identified subnetwork. Also, the order of each element of
this phenotypes list must match the order of ‘ID’ in the experiment information matrix.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pvalueTS &amp;lt;- lapply(datalist, function(x){
  tmp &amp;lt;- as.vector(x$neg.p.value)
  names(tmp) &amp;lt;- x$id
  tmp
})

## generate a new &#39;NWABatch&#39; object for further analysis
nwaTS &amp;lt;- NWABatch(expInfor = expInfor,
                  pvalueTS = pvalueTS, phenotypeTS = phenotypeTS)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;After creating an object of ‘NWABatch’, a preprocessing step needs to be performed which
will return a list of preprocessed ‘NWA’ objects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nwaTS1 &amp;lt;- preprocessNwaTS(nwaTS, species=&amp;quot;Hs&amp;quot;, initialIDs=&amp;quot;SYMBOL&amp;quot;,
                          keepMultipleMappings=TRUE,
                          duplicateRemoverMethod=&amp;quot;max&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;3-2-perform-analysis&#34;&gt;3.2 Perform analysis&lt;/h2&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Similarly, an interactome needs to be created before performing subnetwork analysis using
&lt;em&gt;interactomeNwaTS&lt;/em&gt; if you have not inputted your own interactome in the initial step. You can
either specify the species and fetch the corresponding network from BioGRID database, or input
an interaction matrix if it is in right format. More details please see &lt;em&gt;help(interactomeNwaTS)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Then, &lt;em&gt;analyzeNwaTS&lt;/em&gt; could perform the subnetwork analysis for a list of ‘NWA’ object, which
would take a few minutes. Finally, this step would return a list of analyzed ‘NWA’ objects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nwaTS2 &amp;lt;- interactomeNwaTS(nwaTS1, species=&amp;quot;Hs&amp;quot;,
                           reportDir=&amp;quot;HTSanalyzerReport&amp;quot;, genetic=FALSE)
nwaTS3 &amp;lt;- analyzeNwaTS(nwaTS2, fdr=0.0001, species=&amp;quot;Hs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## get a general summary for the first experiment
summarize(nwaTS3[[1]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;You can then use reportAll to generate an interactive Shiny report to visualize a union
subnetwork for this time series data. To put it more specific, a union subnetwork is generated
by taking the union of identified subnetwork in each experiment. Thus there maybe be some
genes not identified in the subnetwork of one time point but in others. More details please
see Part4: An interactive Shiny report of results.{to be modified}&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>References</title>
      <link>/service/ref/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>/service/ref/</guid>
      <description>&lt;hr /&gt;

&lt;p&gt;&lt;span id=&#34;top&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;[&lt;strong&gt;References:&lt;/strong&gt;]&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Arthur Liberzon, Reid Pinchback, Aravind Subramanian. 2011. “&lt;strong&gt;Molecular Signatures Database (Msigdb) 3.0.&lt;/strong&gt;” Bioinformatics 27 (12): 1739–40. doi:&lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btr260&#34; target=&#34;_blank&#34;&gt;10.1093/bioinformatics/btr260&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Beisser, Klau, D. 2010. “&lt;strong&gt;BioNet: An R-Package for the Functional Analysis of Biological Networks.&lt;/strong&gt;” Bioinformatics 26 (8): 1129–30. doi:&lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btq089&#34; target=&#34;_blank&#34;&gt;10.1093/bioinformatics/btq089&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Dittrich MT, Rosenwald A, Klau GW. 2008. “&lt;strong&gt;Identifying Functional Modules in Protein–Protein Interaction Networks: An Integrated Exact Approach.&lt;/strong&gt;” Bioinformatics 24 (13):
i223–i231. doi:&lt;a href=&#34;https://academic.oup.com/bioinformatics/article/24/13/i223/231653&#34; target=&#34;_blank&#34;&gt;10.1093/bioinformatics/btn161&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Guinney J, Wang X, Dienstmann R. 2015. “&lt;strong&gt;The Consensus Molecular Subtypes of Colorectal Cancer.&lt;/strong&gt;” Nature Medicine 21 (11): 1350–6. doi:&lt;a href=&#34;https://www.nature.com/articles/nm.3967&#34; target=&#34;_blank&#34;&gt;10.1038/nm.3967&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Merico D, Stueker O, Isserlin R. 2010. “&lt;strong&gt;Enrichment Map: A Network-Based Method for Gene-Set Enrichment Visualization and Interpretation.&lt;/strong&gt;” PLoS ONE 5 (11): e13984.
doi:&lt;a href=&#34;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0013984&#34; target=&#34;_blank&#34;&gt;10.1371/journal.pone.0013984&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Sergushichev, Alexey. 2016. “&lt;strong&gt;An Algorithm for Fast Preranked Gene Set Enrichment Analysis Using Cumulative Statistic Calculation.&lt;/strong&gt;” bioRxiv. doi:&lt;a href=&#34;https://doi.org/10.1101/060012&#34; target=&#34;_blank&#34;&gt;10.1101.060012&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Subramanian A, Mootha VK, Tamayo P. 2005. “&lt;strong&gt;Gene Set Enrichment Analysis: A Knowledge-Based Approach for Interpreting Genome-Wide Expression Profiles.&lt;/strong&gt;” Proceedings
of the National Academy of Sciences of the United States of America 102 (43): 15545–50.
doi:&lt;a href=&#34;https://doi.org/10.1073/pnas.0506580102&#34; target=&#34;_blank&#34;&gt;10.1073/pnas.0506580102&lt;/a&gt;. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Tzelepis K, De Braekeleer E, Koike-Yusa H. 2016. “&lt;strong&gt;A Crispr Dropout Screen Identifies Genetic Vulnerabilities and Therapeutic Targets in Acute Myeloid Leukemia.&lt;/strong&gt;” Cell Reports 17 (4):
1193–1205. doi:&lt;a href=&#34;https://doi.org/10.1016/j.celrep.2016.09.079&#34; target=&#34;_blank&#34;&gt;10.1016/j.celrep.2016.09.079&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Session info</title>
      <link>/service/session/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>/service/session/</guid>
      <description>&lt;hr /&gt;

&lt;p&gt;&lt;span id=&#34;top&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;[&lt;strong&gt;Session info:&lt;/strong&gt;]&lt;/p&gt;

&lt;/div&gt;


&lt;pre&gt;&lt;code&gt;R version 3.5.1 (2018-07-02)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 18.04 LTS
##
## Matrix products: default
## BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
## LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
##
## locale:
## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C
## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8
## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8
## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C
## [9] LC_ADDRESS=C LC_TELEPHONE=C
## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] parallel stats4 stats graphics grDevices utils datasets
## [8] methods base
##
## other attached packages:
## [1] TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2
## [2] GenomicFeatures_1.32.0
## [3] GenomicRanges_1.32.3
## [4] GenomeInfoDb_1.16.0
## [5] igraph_1.2.1
## [6] GO.db_3.6.0
## [7] KEGGREST_1.20.0
## [8] org.Hs.eg.db_3.6.0
## [9] AnnotationDbi_1.42.1
## [10] IRanges_2.14.10
## [11] S4Vectors_0.18.3
## [12] Biobase_2.40.0
## [13] BiocGenerics_0.26.0
## [14] HTSanalyzeR2_0.99.15
## [15] BiocStyle_2.8.2
##
## loaded via a namespace (and not attached):
## [1] fgsea_1.6.0 colorspace_1.3-2
## [3] hwriter_1.3.2 rprojroot_1.3-2
## [5] XVector_0.20.0 affyio_1.50.0
## [7] DT_0.4 bit64_0.9-7
## [9] mvtnorm_1.0-8 codetools_0.2-15
## [11] splines_3.5.1 doParallel_1.0.11
## [13] robustbase_0.93-1.1 knitr_1.20
## [15] splots_1.46.0 Rsamtools_1.32.0
## [17] prada_1.56.0 annotate_1.58.0
## [19] cluster_2.0.7-1 Rmpfr_0.7-0
## [21] vsn_3.48.1 png_0.1-7
## [23] shinydashboard_0.7.0 graph_1.58.0
## [25] shiny_1.1.0 rrcov_1.4-4
## [27] compiler_3.5.1 httr_1.3.1
## [29] backports_1.1.2 assertthat_0.2.0
## [31] Matrix_1.2-14 lazyeval_0.2.1
## [33] limma_3.36.2 later_0.7.3
## [35] prettyunits_1.0.2 htmltools_0.3.6
## [37] tools_3.5.1 gmp_0.5-13.2
## [39] bindrcpp_0.2.2 GenomeInfoDbData_1.1.0
## [41] gtable_0.2.0 glue_1.3.0
## [43] affy_1.58.0 Category_2.46.0
## [45] dplyr_0.7.6 fastmatch_1.1-0
## [47] Rcpp_0.12.17 Biostrings_2.48.0
## [49] preprocessCore_1.42.0 rtracklayer_1.40.3
## [51] iterators_1.0.10 xfun_0.3
## [53] stringr_1.3.1 mime_0.5
## [55] miniUI_0.1.1.1 XML_3.98-1.12
## [57] BioNet_1.40.0 DEoptimR_1.0-8
## [59] zlibbioc_1.26.0 MASS_7.3-50
## [61] scales_0.5.0 RankProd_3.6.0
## [63] BiocInstaller_1.30.0 colourpicker_1.0
## [65] hms_0.4.2 promises_1.0.1
## [67] SummarizedExperiment_1.10.1 RBGL_1.56.0
## [69] RColorBrewer_1.1-2 curl_3.2
## [71] yaml_2.1.19 memoise_1.1.0
## [73] gridExtra_2.3 ggplot2_3.0.0
## [75] biomaRt_2.36.1 stringi_1.2.3
## [77] RSQLite_2.1.1 genefilter_1.62.0
## [79] cellHTS2_2.44.0 pcaPP_1.9-73
## [81] foreach_1.4.4 BiocParallel_1.14.1
## [83] matrixStats_0.53.1 rlang_0.2.1
## [85] pkgconfig_2.0.1 bitops_1.0-6
## [87] evaluate_0.11 lattice_0.20-35
## [89] purrr_0.2.5 bindr_0.1.1
## [91] GenomicAlignments_1.16.0 htmlwidgets_1.2
## [93] bit_1.1-14 tidyselect_0.2.4
## [95] GSEABase_1.42.0 plyr_1.8.4
## [97] magrittr_1.5 bookdown_0.7
## [99] R6_2.2.2 DelayedArray_0.6.1
## [101] DBI_1.0.0 pillar_1.3.0
## [103] survival_2.42-3 RCurl_1.95-4.11
## [105] tibble_1.4.2 crayon_1.3.4
## [107] rmarkdown_1.10 progress_1.2.0
## [109] locfit_1.5-9.1 grid_3.5.1
## [111] data.table_1.11.4 blob_1.1.1
## [113] digest_0.6.15 xtable_1.8-2
## [115] httpuv_1.4.5 munsell_0.5.0##
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Special Usage of HTSanalyzeR2</title>
      <link>/post/casestudy3/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>/post/casestudy3/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&#34;top&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#hypergeometric-test-with-no-phenotype&#34;&gt;Hypergeometric test with no phenotype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#customized-gene-set&#34;&gt;Customized gene set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#an-interface-to-fgsea-package&#34;&gt;An interface to fgsea package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#extract-shared-genes-between-enriched-pathways-and-input-gene-list&#34;&gt;Extract shared genes between enriched pathways and input gene list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h1 id=&#34;hypergeometric-test-with-no-phenotype&#34;&gt;Hypergeometric test with no phenotype&lt;/h1&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;In case if you only have a list of genes and want to do hypergeometric test with gene sets
having known functions, &lt;strong&gt;HTSanalyzeR2&lt;/strong&gt; provides an interface to realize it. Since phenotype
is only used as background genes in hypergeometric test, you can manually set all the genes
of that species as phenotype and give them a pseudo value to fit &lt;strong&gt;HTSanalyzeR2&lt;/strong&gt; as below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data(d7)
hits1 &amp;lt;- d7$id[1:200]
## set all the coding genes of Homo sapiens as phenotype
allgenes &amp;lt;- keys(TxDb.Hsapiens.UCSC.hg19.knownGene, keytype = &amp;quot;GENEID&amp;quot;)
## change Entrez ID to gene name to keep consistent with hits
allgenes &amp;lt;- mapIds(org.Hs.eg.db, keys = allgenes,
                   keytype = &amp;quot;ENTREZID&amp;quot;, column = &amp;quot;SYMBOL&amp;quot;)
                   
## give phenotype a pseudo value to fit for HTSanalyzeR2
phenotype &amp;lt;- rep(1, length(allgenes))
names(phenotype) &amp;lt;- allgenes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Then, you can use the artificial phenotype as gene background and your hits to perform
hypergeometric test.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gsca &amp;lt;- GSCA(listOfGeneSetCollections=ListGSC,
             geneList=phenotype, hits=hits1)
## the following analysis is the same as before
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;customized-gene-set&#34;&gt;Customized gene set&lt;/h1&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;When you have your own gene sets with specific functions and they do not belong to any GO
terms, KEGG or MSigDB. In that case, you can set your customized gene set collection and
follow the format of GO, KEGG and MSigDB gene set collections. An important thing here
you need pay attention to is the ID of genes in the gene set collection must be Entrez ID.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## Suppose your own gene sets is geneset1 and geneset2
allgenes &amp;lt;- keys(org.Hs.eg.db, &amp;quot;ENTREZID&amp;quot;)
geneset1 &amp;lt;- allgenes[sample(length(allgenes), 100)]
geneset2 &amp;lt;- allgenes[sample(length(allgenes), 60)]

## Set your custom gene set collection and make the format to fit HTSanalyzeR2
CustomGS &amp;lt;- list(&amp;quot;geneset1&amp;quot; = geneset1, &amp;quot;geneset2&amp;quot; = geneset2)
## then the gene set collections would be as below:
ListGSC &amp;lt;- list(CustomGS=CustomGS)
## other part is the same as before
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;an-interface-to-fgsea-package&#34;&gt;An interface to fgsea package&lt;/h1&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;HTSanalyzeR2 also provides an interface to &lt;a href=&#34;http://bioconductor.org/packages/release/bioc/html/fgsea.html&#34; target=&#34;_blank&#34;&gt;fgsea&lt;/a&gt; package which proposes a novel algorithm
for fast preranked gene set enrichment analysis using cumulative statistic calculation. Details
please see &lt;a href=&#34;http://bioconductor.org/packages/release/bioc/html/fgsea.html&#34; target=&#34;_blank&#34;&gt;fgsea&lt;/a&gt; (Sergushichev (2016)).
To perform GSEA by &lt;strong&gt;fgsea&lt;/strong&gt; instead of HTSanlayzeR2, users need to specifiy the parameter
&lt;em&gt;GSEA&lt;/em&gt;.by in analyze (for single data set) or analyzeGscaTS (for time series analysis) with
fgsea. Otherwise, it will use &lt;strong&gt;HTSanalyzeR2&lt;/strong&gt; by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gsca4 &amp;lt;- analyze(gsca1,
                 para=list(pValueCutoff=0.05, pAdjustMethod=&amp;quot;BH&amp;quot;,
                           nPermutations=100, minGeneSetSize=150,
                           exponent=1),
                 doGSOA = TRUE, doGSEA = TRUE,
                 GSEA.by = &amp;quot;fgsea&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;extract-shared-genes-between-enriched-pathways-and-input-gene-list&#34;&gt;Extract shared genes between enriched pathways and input gene list&lt;/h1&gt;

&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;Once you’ve finished the GSEA or hypergeometric test, you may be interested in some
pathways and wonder which genes are shared by that pathway and you input gene list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## Suppose you are interested in &amp;quot;growth factor activity&amp;quot; in &#39;Molecular Function&#39;,
## of Gene Ontology, We can retrieve the GO ID of this pathway:
GO_MFrslt &amp;lt;- getResult(gsca3)$HyperGeo.results$GO_MF
GOID &amp;lt;- rownames(GO_MFrslt[GO_MFrslt$Gene.Set.Term ==
                                             &amp;quot;growth factor activity&amp;quot;, ])
                                             
## Then get the genes in this pathways
pathway_gene &amp;lt;- GO_MF[[GOID]]

## change Entrez ID to gene symbol
pathway_gene &amp;lt;- mapIds(org.Hs.eg.db, keys = pathway_gene,
                       keytype = &amp;quot;ENTREZID&amp;quot;, column = &amp;quot;SYMBOL&amp;quot;)
## &#39;select()&#39; returned 1:1 mapping between keys and columns

## get the shared genes between this pathway and your input gene list
intersect(pathway_gene, hits)
## [1] &amp;quot;CTGF&amp;quot;    &amp;quot;EFEMP1&amp;quot; &amp;quot;FGF7&amp;quot;  &amp;quot;IGF1&amp;quot;  &amp;quot;INHBA&amp;quot; &amp;quot;NOV&amp;quot;  &amp;quot;OGN&amp;quot;
## [8] &amp;quot;CLEC11A&amp;quot; &amp;quot;CXCL12&amp;quot; &amp;quot;TGFB3&amp;quot; &amp;quot;THBS4&amp;quot; &amp;quot;VEGFC&amp;quot; &amp;quot;DKK1&amp;quot; &amp;quot;PDGFC&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;&lt;i class=&#34;fa fa-hand-o-up fa-1x &#34;&gt;&lt;/i&gt;Top&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>
